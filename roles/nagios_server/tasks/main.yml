---
# tasks file for nagios_server

# boilerplate variable imports to support later versions or other distros
- name: "Include distro specific variables"
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      skip: true
      paths:
      - 'vars'

- name: "Install required Nagios server and plugin packages"
  ansible.builtin.package:
    name: "{{ nagios_packages }}"
    state: "present"
  become: true

# More info on apache and bcrypt https://www.endpointdev.com/blog/2016/02/bonked-by-basicauth-because-bcrypt/
#TODO make htpasswd shell command idempotent since the module doesn't support bcrypt
- name: "Remove default nagios passwd file"
  ansible.builtin.file:
    path: "{{ nagios_config_path }}/passwd"
    state: "absent"
  when: "nagios_config_path ~ '/passwd' != nagios_htpasswd_path"
  become: true

- name: "Create empty file for htpasswd"
  ansible.builtin.file:
    path: "{{ nagios_htpasswd_path }}"
    state: "touch"
    access_time: "preserve"
    mode: 0640
    owner: "root"
    group: "{{ nagios_apache_user }}"
  become: true

# There is an htpasswd module for Ansible, but it doesn't support bcrypt properly.
- name: "Create htpasswd for admin users"
  ansible.builtin.shell: 'export HISTIGNORE="htpasswd*" && htpasswd -Bb -C 10 {{ nagios_htpasswd_path }} {{ item.name }} {{ item.pass }}'
  loop: "{{ nagios_admins }}"
  become: true

- name: "Create Apache virtualhost template for nagios"
  ansible.builtin.template:
    src: "etc/httpd/conf.d/nagios.conf.j2"
    dest: "/etc/httpd/conf.d/nagios.conf"
    lstrip_blocks: true
    mode: 0644
    owner: "root"
    group: "root"
  become: true
  notify: "restart httpd"

- name: "Create default virtualhost to redirect to HTTPS Nagios"
  ansible.builtin.template:
    src: "etc/httpd/conf.d/00default_vhost.conf.j2"
    dest: "/etc/httpd/conf.d/00default_vhost.conf"
    lstrip_blocks: true
    mode: 0644
    owner: "root"
    group: "root"
  become: true
  when: nagios_vhost_default_redirect | bool
  notify: "restart httpd"

- name: "Include tasks to build combined list of Ansible auto-gen and manually specified (non-Ansible) objects to be monitored."
  ansible.builtin.include_tasks: "build_object_list.yml"

- name: "Set path variable from each object's type, team, and location"
  ansible.builtin.set_fact:
    nagios_hostcfgs_paths: "{{ nagios_hostcfgs_paths | default([]) + [ '/' ~ item.type ~ '/' ~ item.team ~ '/' ~ item.location ] }}"
  loop: "{{ nagios_hostcfgs_list }}"

- name: "Create all unique object directory paths"
  ansible.builtin.file:
    path: "{{ nagios_config_path }}/objects/hosts{{ item }}"
    state: "directory"
    owner: "root"
    group: "{{ nagios_system_user }}"
    mode: 0750
  loop: "{{ nagios_hostcfgs_paths | unique }}"
  become: true

- name: "Create commands config directory"
  ansible.builtin.file:
    path: "{{ nagios_config_path }}/objects/commands"
    state: "directory"
    owner: "root"
    group: "{{ nagios_system_user }}"
    mode: 0750
  become: true

- name: "Create host templates directory"
  ansible.builtin.file:
    path: "{{ nagios_config_path }}/objects/host_templates"
    state: "directory"
    owner: "root"
    group: "{{ nagios_system_user }}"
    mode: 0750
  become: true

- name: "Create service templates directory"
  ansible.builtin.file:
    path: "{{ nagios_config_path }}/objects/svc_templates"
    state: "directory"
    owner: "root"
    group: "{{ nagios_system_user }}"
    mode: 0750
  become: true

- name: "Create hostgroups directory"
  ansible.builtin.file:
    path: "{{ nagios_config_path }}/objects/hostgroups"
    state: "directory"
    owner: "root"
    group: "{{ nagios_system_user }}"
    mode: 0750
  become: true

- name: "Create directory for custom plugins/scripts"
  ansible.builtin.file:
    path: "{{ nagios_custom_plugins_path }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: 0755
  become: true

- name: "Archive unused default config files outside of the objects directory"
  ansible.builtin.command: "mv -v {{ nagios_config_path }}/objects/{{ item }} {{ nagios_config_path }}/{{ item }}.sample"
  args:
    removes: "{{ nagios_config_path }}/objects/{{ item }}"
    creates: "{{ nagios_config_path }}/{{ item }}.sample"
  loop: "{{ nagios_default_cfg_samples }}"
  become: true

- name: "Block of nagios config copy and templating tasks"
  block:
    - name: "Create cgi.cfg template"
      ansible.builtin.template:
        src: "etc/nagios/cgi.cfg.j2"
        dest: "{{ nagios_config_path }}/cgi.cfg"
        lstrip_blocks: true
        mode: 0644
        owner: "root"
        group: "root"
        backup: true
      become: true
      register: r_cgi_template
      notify: "restart nagios"

    - name: "Create nagios.cfg template"
      ansible.builtin.template:
        src: "etc/nagios/nagios.cfg.j2"
        dest: "{{ nagios_config_path }}/nagios.cfg"
        lstrip_blocks: true
        mode: 0644
        owner: "root"
        group: "root"
        backup: true
      become: true
      register: r_nagios_template
      notify: "restart nagios"

#TODO timeperiod template


# Note: the objects and private dirs have permissions root:nagios:0640
    - name: "Create resource.cfg template (user macros)"
      ansible.builtin.template:
        src: "etc/nagios/private/resource.cfg.j2"
        dest: "{{ nagios_config_path }}/private/resource.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      register: r_resource_template
      notify: "restart nagios"

    - name: "Create main commands template"
      ansible.builtin.template:
        src: "etc/nagios/objects/commands/commands.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/commands/commands.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      register: r_commands_template
      notify: "restart nagios"

    - name: "Create notify commands template"
      ansible.builtin.template:
        src: "etc/nagios/objects/commands/notify_commands.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/commands/notify_commands.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      register: r_notify_commands_template
      notify: "restart nagios"

    - name: "Create event commands template"
      ansible.builtin.template:
        src: "etc/nagios/objects/commands/event_commands.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/commands/event_commands.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      register: r_event_commands_template
      notify: "restart nagios"

#TODO - name: "Create localhost template for Nagios to check its host system"

    - name: "Create base host templates"
      ansible.builtin.template:
        src: "etc/nagios/objects/host_templates/base_host.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/host_templates/{{ item.name }}_host_template.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      loop: "{{ nagios_base_host_templates }}"
      register: r_loop_host_templates
      notify: "restart nagios"

    - name: "Create base service templates"
      ansible.builtin.template:
        src: "etc/nagios/objects/svc_templates/base_svc.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/svc_templates/{{ item.name }}_svc_template.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      loop: "{{ nagios_base_svc_templates }}"
      register: r_loop_svc_templates
      notify: "restart nagios"

    - name: "Create default hostgroup views"
      ansible.builtin.template:
        src: "etc/nagios/objects/hostgroups/default_hostgroups.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/hostgroups/default_hostgroups.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      register: r_default_hostgroups_template
      notify: "restart nagios"

    - name: "Create hostgroup object templates with services"
      ansible.builtin.template:
        src: "etc/nagios/objects/hostgroups/hostgroups.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/hostgroups/{{ item.hostgroup_name }}_hostgroup.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      loop: "{{ nagios_hostgroups_list }}"
      become: true
      register: r_loop_hostgroup_templates
      notify: "restart nagios"

    - name: "Create contacts template"
      ansible.builtin.template:
        src: "etc/nagios/objects/contacts.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/contacts.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      become: true
      register: r_contacts_template
      notify: "restart nagios"

    - name: "Create host config templates for each host and its services"
      ansible.builtin.template:
        src: "etc/nagios/objects/hosts/host.cfg.j2"
        dest: "{{ nagios_config_path }}/objects/hosts/{{ item.type }}/{{ item.team }}/{{ item.location }}/{{ item.host_name }}.cfg"
        lstrip_blocks: true
        owner: "root"
        group: "root"
        mode: 0644
        backup: true
      loop: "{{ nagios_hostcfgs_list }}"
      become: true
      register: r_loop_hostcfg_templates
      notify: "restart nagios"

  rescue:
    - name: "Include config undo tasks due to error during templating tasks"
      include_tasks: "undo_template_changes.yml"
      when: nagios_config_validate | bool

# This might be better as a git repo download
- name: "Copy custom plugins/scripts (USER2 macro by default)"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nagios_custom_plugins_path }}/{{ item | basename }}"
    owner: "root"
    group: "root"
    mode: 0755
  loop: "{{ lookup('fileglob', 'custom_nagios_plugins/*', wantlist=True) }}"
  become: true

- name: "Validate templated nagios configuration"
  shell: "/usr/bin/env nagios -v -v {{ nagios_config_path }}/nagios.cfg"
  when: nagios_config_validate | bool
  changed_when: false
  failed_when: false
  register: r_nagios_cfg_validate
  become: true

- name: "Enable nagios server service"
  service:
    name: "nagios"
    enabled: true
  when: not nagios_config_validate | bool or r_nagios_cfg_validate.rc == 0

- name: "Revert template changes to backups due to validation error"
  include_tasks: "undo_template_changes.yml"
  when: nagios_config_validate | bool and r_nagios_cfg_validate.rc != 0

#TODO this may need an optional cleaning task that deletes any hosts that don't match the hostcfgs list, but
# that's difficult to make idempotent.
#- name: "Archive and remove any retired host objects"
